import{_ as n,o as e,c as o,Q as a,k as s}from"./chunks/framework.cff8262b.js";const f=JSON.parse('{"title":"Submitting data blobs to Celestia","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Submitting data blobs to Celestia | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/submit-data.md","filePath":"developers/submit-data.md","lastUpdated":1697652631000}'),l={name:"developers/submit-data.md"},p=a('<h1 id="submitting-data-blobs-to-celestia" tabindex="-1">Submitting data blobs to Celestia <a class="header-anchor" href="#submitting-data-blobs-to-celestia" aria-label="Permalink to &quot;Submitting data blobs to Celestia&quot;">​</a></h1><p>To submit data to Celestia, users submit blob transactions (<code>BlobTx</code>). Blob transactions contain two components, a standard Cosmos-SDK transaction called <code>MsgPayForBlobs</code> and a <code>Blob</code> of data.</p><h2 id="fee-market-and-mempool" tabindex="-1">Fee market and mempool <a class="header-anchor" href="#fee-market-and-mempool" aria-label="Permalink to &quot;Fee market and mempool&quot;">​</a></h2><p>Celestia makes use of a standard gas-priced prioritized mempool. By default, transactions with fees higher than that of other transactions in the mempool will be prioritized by validators.</p><h3 id="fees-and-gas-limits" tabindex="-1">Fees and gas limits <a class="header-anchor" href="#fees-and-gas-limits" aria-label="Permalink to &quot;Fees and gas limits&quot;">​</a></h3><p>As of version v1.0.0 of the application (celestia-app), there is no protocol enforced protocol minimum fee (similar to EIP-1559 in Ethereum). Instead, each consensus node running a mempool uses a locally configured gas price threshold that must be met in order for that node to accept a transaction, either directly from a user or gossiped from another node, into its mempool.</p><p>As of version v1.0.0 of the application (celestia-app), gas is not refunded. Instead, transaction fees are deducted by a flat fee, originally determined by the user via multiplying the gas limit by the desired gas price. This means that users should use an accurate gas limit value if they do not wish to over pay.</p><p>Under the hood, fees are currently handled by specifying and deducting a flat fee. However gas price is often specified by users instead of calculating the flat fee from the gas used and the gas price. Since the state machine does not refund users for unused gas, gas price is calculated by dividing the total fee by the gas limit.</p><h4 id="estimating-pfb-gas" tabindex="-1">Estimating PFB gas <a class="header-anchor" href="#estimating-pfb-gas" aria-label="Permalink to &quot;Estimating PFB gas&quot;">​</a></h4><p>Generally, the gas used by a PFB transaction involves a static fixed cost and a dynamic cost based on the size of each blob involved in the transaction.</p><blockquote><p>Note: For a general use case of a normal account submitting a PFB, the static costs can be treated as such. However, due to the description above of how gas works in the Cosmos-SDK this is not always the case. Notably, if we use a vesting account or the <code>feegrant</code> modules, then these static costs change.</p></blockquote><p>The fixed cost is an approximation of the gas consumed by operations outside the function <code>GasToConsume</code> (for example, signature verification, tx size, read access to accounts), which has a default value of 65,000 gas.</p><blockquote><p>Note: the first transaction sent by an account (sequence number == 0) has an additional one time gas cost of 10,000 gas. If this is the case, this should be accounted for.</p></blockquote><p>Each blob in the PFB contributes to the total gas cost based on its size. The function <code>GasToConsume</code> calculates the total gas consumed by all the blobs involved in a PFB, where each blob&#39;s gas cost is computed by first determining how many shares are needed to store the blob size. Then, it computes the product of the number of shares, the number of bytes per share, and the <code>gasPerByte</code> parameter. Finally, it adds a static amount per blob.</p><p>The <code>GasCostPerBlobByte</code> and <code>GasCostPerTransactionByte</code> are parameters that could potentially be adjusted through the system&#39;s governance mechanisms. Hence, actual costs may vary depending on the current state of these parameters.</p><h4 id="gas-fee-calculation" tabindex="-1">Gas fee calculation <a class="header-anchor" href="#gas-fee-calculation" aria-label="Permalink to &quot;Gas fee calculation&quot;">​</a></h4><p>The total fee for a transaction is calculated as the product of the gas limit for the transaction and the gas price set by the user:</p>',17),t=s("p",{Gas:"",Price:""},"\\(\\text{Total Fee} = \\text{Gas Limit} \\times \\text\\)",-1),c=s("p",null,"The gas limit for a transaction is the maximum amount of gas that a user is willing to spend on a transaction. It is determined by both a static fixed cost and a variable dynamic cost based on the size of each blob involved in the transaction:",-1),r=s("p",{Gas:"",Cost:"",Per:"",Blob:"",Byte:""},"\\(\\text{Gas Limit} = \\text{Fixed Cost} + \\sum_{i=1}^{n} \\text{SparseSharesNeeded(Blob}_i) \\times \\text{Share Size} \\times \\text\\)",-1),i=a(`<p>Where:</p><ul><li>\\(\\text{Fixed Cost}\\) is a static value (65,000 gas)</li><li>\\(\\text{SparseSharesNeeded(Blob}_i)\\) is the number of shares needed for the \\(i\\)th blob in the transaction</li><li>\\(\\text{Share Size}\\) is the size of each share</li><li>\\(\\text{Gas Cost Per Blob Byte}\\) is a parameter that could potentially be adjusted through the system&#39;s governance mechanisms.</li></ul><p>The gas fee is set by the user when they submit a transaction. The fee is often specified by users directly. The total cost for the transaction is then calculated as the product of the estimated gas limit and the gas price. Since the state machine does not refund users for unused gas, it&#39;s important for users to estimate the gas limit accurately to avoid overpaying.</p><p>For more details on how gas is calculated per blob, refer to the <a href="https://github.com/celestiaorg/celestia-app/blob/32d247971386c1944d44bec1faeb000b1ff1dd51/x/blob/keeper/keeper.go#L53" target="_blank" rel="noreferrer"><code>PayForBlobs</code> function</a> that consumes gas based on the blob sizes. This function uses the <a href="https://github.com/celestiaorg/celestia-app/blob/32d247971386c1944d44bec1faeb000b1ff1dd51/x/blob/types/payforblob.go#L157-L167" target="_blank" rel="noreferrer"><code>GasToConsume</code> function</a> to calculate the extra gas charged to pay for a set of blobs in a <code>MsgPayForBlobs</code> transaction. This function calculates the total shares used by all blobs and multiplies it by the <code>ShareSize</code> and <code>gasPerByte</code> to get the total gas to consume.</p><p>For estimating the total gas required for a set of blobs, refer to the <a href="https://github.com/celestiaorg/celestia-app/blob/32d247971386c1944d44bec1faeb000b1ff1dd51/x/blob/types/payforblob.go#L169-L181" target="_blank" rel="noreferrer"><code>EstimateGas</code> function</a>. This function estimates the gas based on a linear model that is dependent on the governance parameters: <code>gasPerByte</code> and <code>txSizeCost</code>. It assumes other variables are constant, including the assumption that the <code>MsgPayForBlobs</code> is the only message in the transaction. The <code>DefaultEstimateGas</code> function runs <code>EstimateGas</code> with the system defaults.</p><h4 id="estimating-gas-programmatically" tabindex="-1">Estimating gas programmatically <a class="header-anchor" href="#estimating-gas-programmatically" aria-label="Permalink to &quot;Estimating gas programmatically&quot;">​</a></h4><p>Users can estimate an efficient gas limit by using this function:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">blobtypes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/x/blob/types</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">gasLimit </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blobtypes.</span><span style="color:#79B8FF;">DefaultEstimateGas</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">uint32</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">uint32</span><span style="color:#E1E4E8;">(sizeOfDataInBytes)})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">blobtypes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/x/blob/types</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gasLimit </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blobtypes.</span><span style="color:#005CC5;">DefaultEstimateGas</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">uint32</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">uint32</span><span style="color:#24292E;">(sizeOfDataInBytes)})</span></span></code></pre></div><p>If using a celestia-node light client, then this function is automatically called for you when submitting a blob. This function works by breaking down the components of calculating gas for a blob transaction. These components consist of a flat costs for all PFBs, the size of each blob and how many shares each uses and the parameter for gas used per byte. More information about how gas is used can be found in the <a href="https://github.com/celestiaorg/celestia-app/blob/d17e231ae3a0150b50a1854f3e9a268c34502b6b/specs/src/specs/resource_pricing.md" target="_blank" rel="noreferrer">gas specs</a> and the exact formula can be found in the <a href="https://github.com/celestiaorg/celestia-app/blob/d17e231ae3a0150b50a1854f3e9a268c34502b6b/x/blob/types/payforblob.go#L157-L181" target="_blank" rel="noreferrer">blob module</a>.</p><h3 id="submitting-multiple-transactions-in-one-block-from-the-same-account" tabindex="-1">Submitting multiple transactions in one block from the same account <a class="header-anchor" href="#submitting-multiple-transactions-in-one-block-from-the-same-account" aria-label="Permalink to &quot;Submitting multiple transactions in one block from the same account&quot;">​</a></h3><p>The mempool Celestia uses works by maintaining a fork of the canonical state each block. This means that each time we submit a transaction to it, it will update the sequence number (aka nonce) for the account that submitted the transaction. If users wish to submit a second transaction, they can, but must specify the nonce manually. If this is not done, the new transactions will not be able to be submitted until the first transaction is reaped from the mempool (i.e. included in a block), or dropped due to timing out.</p><p>By default, nodes will drop a transaction if it does not get included in 10 blocks (roughly 2.5 minutes). At this point, the user must resubmit their transaction if they want it to eventually be included.</p><p>As of v1.0.0 of the application (celestia-app), users are unable to replace an existing transaction with a different one with higher fees. They must instead wait 10 blocks from the original submitted time and then resubmit the transaction. Again, community members have already suggested solutions and a willingness to accept changes to fix this issue.</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p>Users can currently create and submit <code>BlobTx</code>s in four ways.</p><h3 id="the-celestia-app-consensus-node-cli" tabindex="-1">The celestia-app consensus node CLI <a class="header-anchor" href="#the-celestia-app-consensus-node-cli" aria-label="Permalink to &quot;The celestia-app consensus node CLI&quot;">​</a></h3><div class="language-terminal vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">terminal</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">celestia-appd tx blob PayForBlobs &lt;hex encoded namespace&gt; &lt;hex encoded data&gt; [flags]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">celestia-appd tx blob PayForBlobs &lt;hex encoded namespace&gt; &lt;hex encoded data&gt; [flags]</span></span></code></pre></div><h3 id="the-celestia-node-light-node-cli" tabindex="-1">The celestia-node light node CLI <a class="header-anchor" href="#the-celestia-node-light-node-cli" aria-label="Permalink to &quot;The celestia-node light node CLI&quot;">​</a></h3><p>Using <code>blob.Submit</code>:</p><div class="language-terminal vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">terminal</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">celestia blob submit &lt;hex encoded namespace&gt; &lt;hex encoded data&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">celestia blob submit &lt;hex encoded namespace&gt; &lt;hex encoded data&gt;</span></span></code></pre></div><p>Learn more in the <a href="./../../developers/node-tutorial">node tutorial</a>.</p><h3 id="grpc-to-a-consensus-node-via-the-user-package" tabindex="-1">GRPC to a consensus node via the <code>user</code> package <a class="header-anchor" href="#grpc-to-a-consensus-node-via-the-user-package" aria-label="Permalink to &quot;GRPC to a consensus node via the \`user\` package&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/app</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/app/encoding</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/pkg/appconsts</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/pkg/namespace</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/pkg/user</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">blobtypes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-app/x/blob/types</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/cosmos/cosmos-sdk/crypto/keyring</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tmproto</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/tendermint/tendermint/proto/tendermint/types</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">google.golang.org/grpc</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">google.golang.org/grpc/credentials/insecure</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitData is a demo function that shows how to use the signer to submit data</span></span>
<span class="line"><span style="color:#6A737D;">// to the blockchain directly via a celestia node. We can manage this keyring</span></span>
<span class="line"><span style="color:#6A737D;">// using the \`celestia-appd keys\` or \`celestia keys\` sub commands and load this</span></span>
<span class="line"><span style="color:#6A737D;">// keyring from a file and use it to programmatically sign transactions.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoSubmitData</span><span style="color:#E1E4E8;">(grpcAddr </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, kr keyring.Keyring) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create an encoding config that can decode and encode all celestia-app</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// data structures.</span></span>
<span class="line"><span style="color:#E1E4E8;">    ecfg </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> encoding.</span><span style="color:#79B8FF;">MakeConfig</span><span style="color:#E1E4E8;">(app.ModuleEncodingRegisters</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a connection to the grpc server on the consensus node.</span></span>
<span class="line"><span style="color:#E1E4E8;">    conn, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#79B8FF;">Dial</span><span style="color:#E1E4E8;">(grpcAddr, grpc.</span><span style="color:#79B8FF;">WithTransportCredentials</span><span style="color:#E1E4E8;">(insecure.</span><span style="color:#79B8FF;">NewCredentials</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> conn.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// get the address of the account we want to use to sign transactions.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rec, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> kr.</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accountName&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    addr, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rec.</span><span style="color:#79B8FF;">GetAddress</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Setup the signer. This function will automatically query the relevant</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// account information such as sequence (nonce) and account number.</span></span>
<span class="line"><span style="color:#E1E4E8;">    signer, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#79B8FF;">SetupSigner</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), kr, conn, addr, ecfg)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    ns </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> namespace.</span><span style="color:#79B8FF;">MustNewV0</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1234567890&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;namepace&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(ns.</span><span style="color:#79B8FF;">Bytes</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    blob, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blobtypes.</span><span style="color:#79B8FF;">NewBlob</span><span style="color:#E1E4E8;">(ns, []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some data&quot;</span><span style="color:#E1E4E8;">), appconsts.ShareVersionZero)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    gasLimit </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blobtypes.</span><span style="color:#79B8FF;">DefaultEstimateGas</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">uint32</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">uint32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(blob.Data))})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []user.TxOption{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// here we&#39;re setting estimating the gas limit from the above estimated</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// function, and then setting the gas price to 0.1utia per unit of gas.</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#79B8FF;">SetGasLimitAndFee</span><span style="color:#E1E4E8;">(gasLimit, </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// this function will submit the transaction and block until a timeout is</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// reached or the transaction is committed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> signer.</span><span style="color:#79B8FF;">SubmitPayForBlob</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">tmproto.Blob{blob}, options</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// check the response code to see if the transaction was successful.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp.Code </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// handle code</span></span>
<span class="line"><span style="color:#E1E4E8;">        fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(resp.Code, resp.Codespace, resp.RawLog)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// if we don&#39;t want to wait for the transaction to be confirmed, we can</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// manually sign and submit the transaction using the same package.</span></span>
<span class="line"><span style="color:#E1E4E8;">    blobTx, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> signer.</span><span style="color:#79B8FF;">CreatePayForBlob</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">tmproto.Blob{blob}, options</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    resp, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> signer.</span><span style="color:#79B8FF;">BroadcastTx</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), blobTx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// check the response code to see if the transaction was successful. Note</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// that this time we&#39;re not waiting for the transaction to be committed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Therefore the code here is only from the consensus node&#39;s mempool.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp.Code </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// handle code</span></span>
<span class="line"><span style="color:#E1E4E8;">        fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(resp.Code, resp.Codespace, resp.RawLog)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/app</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/app/encoding</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/pkg/appconsts</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/pkg/namespace</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/pkg/user</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">blobtypes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-app/x/blob/types</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/cosmos/cosmos-sdk/crypto/keyring</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tmproto</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/tendermint/tendermint/proto/tendermint/types</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">google.golang.org/grpc</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">google.golang.org/grpc/credentials/insecure</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitData is a demo function that shows how to use the signer to submit data</span></span>
<span class="line"><span style="color:#6A737D;">// to the blockchain directly via a celestia node. We can manage this keyring</span></span>
<span class="line"><span style="color:#6A737D;">// using the \`celestia-appd keys\` or \`celestia keys\` sub commands and load this</span></span>
<span class="line"><span style="color:#6A737D;">// keyring from a file and use it to programmatically sign transactions.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoSubmitData</span><span style="color:#24292E;">(grpcAddr </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, kr keyring.Keyring) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create an encoding config that can decode and encode all celestia-app</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// data structures.</span></span>
<span class="line"><span style="color:#24292E;">    ecfg </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> encoding.</span><span style="color:#005CC5;">MakeConfig</span><span style="color:#24292E;">(app.ModuleEncodingRegisters</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a connection to the grpc server on the consensus node.</span></span>
<span class="line"><span style="color:#24292E;">    conn, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> grpc.</span><span style="color:#005CC5;">Dial</span><span style="color:#24292E;">(grpcAddr, grpc.</span><span style="color:#005CC5;">WithTransportCredentials</span><span style="color:#24292E;">(insecure.</span><span style="color:#005CC5;">NewCredentials</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> conn.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// get the address of the account we want to use to sign transactions.</span></span>
<span class="line"><span style="color:#24292E;">    rec, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> kr.</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accountName&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    addr, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rec.</span><span style="color:#005CC5;">GetAddress</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Setup the signer. This function will automatically query the relevant</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// account information such as sequence (nonce) and account number.</span></span>
<span class="line"><span style="color:#24292E;">    signer, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.</span><span style="color:#005CC5;">SetupSigner</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), kr, conn, addr, ecfg)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    ns </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> namespace.</span><span style="color:#005CC5;">MustNewV0</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1234567890&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;namepace&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(ns.</span><span style="color:#005CC5;">Bytes</span><span style="color:#24292E;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    blob, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blobtypes.</span><span style="color:#005CC5;">NewBlob</span><span style="color:#24292E;">(ns, []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some data&quot;</span><span style="color:#24292E;">), appconsts.ShareVersionZero)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    gasLimit </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blobtypes.</span><span style="color:#005CC5;">DefaultEstimateGas</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">uint32</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">uint32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(blob.Data))})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []user.TxOption{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// here we&#39;re setting estimating the gas limit from the above estimated</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// function, and then setting the gas price to 0.1utia per unit of gas.</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#005CC5;">SetGasLimitAndFee</span><span style="color:#24292E;">(gasLimit, </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this function will submit the transaction and block until a timeout is</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// reached or the transaction is committed.</span></span>
<span class="line"><span style="color:#24292E;">    resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> signer.</span><span style="color:#005CC5;">SubmitPayForBlob</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">tmproto.Blob{blob}, options</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// check the response code to see if the transaction was successful.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp.Code </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// handle code</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(resp.Code, resp.Codespace, resp.RawLog)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// if we don&#39;t want to wait for the transaction to be confirmed, we can</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// manually sign and submit the transaction using the same package.</span></span>
<span class="line"><span style="color:#24292E;">    blobTx, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> signer.</span><span style="color:#005CC5;">CreatePayForBlob</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">tmproto.Blob{blob}, options</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    resp, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> signer.</span><span style="color:#005CC5;">BroadcastTx</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), blobTx)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// check the response code to see if the transaction was successful. Note</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// that this time we&#39;re not waiting for the transaction to be committed.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Therefore the code here is only from the consensus node&#39;s mempool.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp.Code </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// handle code</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(resp.Code, resp.Codespace, resp.RawLog)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="rpc-to-a-celestia-node" tabindex="-1">RPC to a celestia-node <a class="header-anchor" href="#rpc-to-a-celestia-node" aria-label="Permalink to &quot;RPC to a celestia-node&quot;">​</a></h3><p>Using the JSON RPC API, submit data using the following methods:</p><ul><li><a href="https://node-rpc-docs.celestia.org/#blob.Submit" target="_blank" rel="noreferrer">blob.Submit</a></li><li><a href="https://node-rpc-docs.celestia.org/#state.SubmitPayForBlob" target="_blank" rel="noreferrer">state.SubmitPayForBlob</a></li></ul><p>Learn more in the <a href="https://node-rpc-docs.celestia.org/" target="_blank" rel="noreferrer">celestia-node API docs</a>.</p>`,27),y=[p,t,c,r,i];function E(d,u,h,b,m,g){return e(),o("div",null,y)}const C=n(l,[["render",E]]);export{f as __pageData,C as default};
