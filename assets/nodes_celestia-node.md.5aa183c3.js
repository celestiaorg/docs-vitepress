import{c as u}from"./chunks/constants.85711f77.js";import{_ as m,o as n,c as i,k as e,L as f,M as C,n as k,t as o,K as g,O as l,a,w as T,X as v}from"./chunks/framework.5a6ba88b.js";const y={data(){return{activeTab:0,tabs:[{name:"Mocha",content:`this is code with ${u.mochaChainId}<br/>more code<br/>and then this line is one that is going to overflow and we'll see what happens now`},{name:"Arabica",content:`this is code with ${u.arabicaChainId}`}]}},methods:{copyToClipboard(){navigator.clipboard.writeText(this.tabs[this.activeTab].content)}}},I={class:"tabs"},w=["onClick"],x={class:"tab-content"},$={class:"code-box"},A=["innerHTML"];function V(p,t,b,c,s,r){return n(),i("div",null,[e("div",I,[(n(!0),i(f,null,C(s.tabs,(d,h)=>(n(),i("div",{key:h,onClick:H=>s.activeTab=h,class:k({active:s.activeTab===h})},o(d.name),11,w))),128))]),e("div",x,[e("div",$,[e("pre",null,[e("code",{innerHTML:s.tabs[s.activeTab].content},null,8,A)]),e("i",{class:"fas fa-clipboard copy-icon",onClick:t[0]||(t[0]=(...d)=>r.copyToClipboard&&r.copyToClipboard(...d))})])])])}const q=m(y,[["render",V],["__scopeId","data-v-fb55de52"]]),P={data(){return{text:"```hello world```"}}};function S(p,t,b,c,s,r){return n(),i("div",null,o(s.text),1)}const _=m(P,[["render",S]]),D=v('<h1 id="celestia-node" tabindex="-1">Celestia node <a class="header-anchor" href="#celestia-node" aria-label="Permalink to &quot;Celestia node&quot;">​</a></h1><h2 id="normal-code-block" tabindex="-1">normal code block <a class="header-anchor" href="#normal-code-block" aria-label="Permalink to &quot;normal code block&quot;">​</a></h2><p>Testing out variables in code blocks. This is the default code block with tabs, and no variables:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-NI9_x" id="tab-Ehxbu8_" checked="checked"><label for="tab-Ehxbu8_">potato</label><input type="radio" name="group-NI9_x" id="tab-EVs_EXe"><label for="tab-EVs_EXe">pancakes</label></div><div class="blocks"><div class="language-md active"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import constants from &quot;/.vitepress/versions/constants.js&quot;;</span></span></code></pre></div><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import constants from &quot;/.potato/pancakes/constants.js&quot;;</span></span></code></pre></div></div></div><h2 id="custom-code-block" tabindex="-1">custom code block <a class="header-anchor" href="#custom-code-block" aria-label="Permalink to &quot;custom code block&quot;">​</a></h2><p>This is the custom cude block with tabs, and variables from the constants.js file:</p><p>known issues</p><ul><li>there is not enough padding on the right side when text overflows</li><li>the clipboard icon moves when you scroll</li><li>oof. copies the html break tags when you copy multiple lines of code</li></ul>',8),E=e("code",null,' function helloWorld() { console.log("Hello, world!"); } ',-1),N=e("h2",{id:"testing-frontmatter-variables",tabindex:"-1"},[a("testing frontmatter variables "),e("a",{class:"header-anchor",href:"#testing-frontmatter-variables","aria-label":'Permalink to "testing frontmatter variables"'},"​")],-1),M=e("p",null,"This is a section to test variables used in frontmatter. It is not possible to display variables in the native code blocks on Vitepress.",-1),j=e("code",null,"mochaChainId",-1),B=e("code",null,"arabicaChainId",-1),L=v('<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">{ $frontmatter.arabicaChainId }}</span></span></code></pre></div><p>This is <a href="./v0.11.0-rc8">random value</a></p><h2 id="use-variables-like-this" tabindex="-1">use variables like this <a class="header-anchor" href="#use-variables-like-this" aria-label="Permalink to &quot;use variables like this&quot;">​</a></h2>',3),O=e("p",null,"git checkout $VERSION",-1),G=JSON.parse('{"title":"Celestia node","description":"","frontmatter":{"mochaChainId":"mocha-4","arabicaChainId":"arabica-10","head":[["meta",{"name":"og:title","content":"Celestia node | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"nodes/celestia-node.md","filePath":"nodes/celestia-node.md","lastUpdated":1696457184000}'),F={name:"nodes/celestia-node.md"},J=Object.assign(F,{setup(p){return(t,b)=>{const c=g("codeblock");return n(),i("div",null,[D,l(q),l(_),e("pre",null,[e("code",null,[a(`
    `),l(_),a(`
`)])]),l(c,null,{default:T(()=>[a("hi")]),_:1}),E,N,M,e("pre",null,[e("code",null,`
const mochaChainId = "`+o(t.$frontmatter.mochaChainId)+`";
const arabicaChainId = "`+o(t.$frontmatter.arabicaChainId)+`";
`,1)]),e("p",null,[a("In this example, "),j,a(" and "),B,a(" are variables defined in the frontmatter. They are then accessed in the JavaScript code block using "),e("code",null,o(t.$frontmatter.mochaChainId),1),a(" and "),e("code",null,o(t.$frontmatter.arabicaChainId),1),a(".")]),L,e("p",null,[a("Arabica Version: "),e("code",null,o(t.$frontmatter.arabicaChainId),1),a(" Mocha Version: `"+o(t.$frontmatter.mochaChainId)+"``",1)]),O])}}});export{G as __pageData,J as default};
